// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // out of zero x
    Mux16(a=x, b=false, sel=zx, out=outZeroX);
    
    // out of zero y
    Mux16(a=y, b=false, sel=zy, out=outZeroY);

    // out of negate x
    Not16(in=outZeroX, out=outNegateX);

    // out of negate y
    Not16(in=outZeroY, out=outNegateY);

    // Switch x is negate or not
    Mux16(a=outZeroX, b=outNegateX, sel=nx, out=outZeroNegateX);

    // Switch y is negate or not
    Mux16(a=outZeroY, b=outNegateY, sel=ny, out=outZeroNegateY);

    // Add x and y
    Add16(a=outZeroNegateX, b=outZeroNegateY, out=outAdd);

    // And X and y
    And16(a=outZeroNegateX, b=outZeroNegateY, out=outAnd);

    // switch out is add or and    
    Mux16(a=outAnd, b=outAdd, sel=f, out=outAddOrAnd);

    // negate out
    Not16(in=outAddOrAnd, out=negateOut);

    // switch out is normal or negate
    Mux16(a=outAddOrAnd, b=negateOut, sel=no, out=out, out[15] = outML, out[0..7]=outFirstHalf, out[8..15] = outSecondHalf);


    // zr is true if out is 0 
    Or8Way(in=outFirstHalf,  out=outZr1);
    Or8Way(in=outSecondHalf, out=outZr2);
    Or(a=outZr1, b=outZr2, out=negateZr);
    Not(in=negateZr, out=zr);

    // ng is tru if out is negative
    And(a=outML, b=true, out=ng);
}